name: Unified Monorepo Deploy

on:
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
      brief: ${{ steps.filter.outputs.brief }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'packages/forgeline-app/**'
            brief:
              - 'packages/forgeline-brief/**'

  build-and-deploy:
    needs: changes
    # [no-deploy] 태그가 없고, 변경된 파일이 있거나 수동 배포 태그가 있을 때 실행
    if: |
      !contains(github.event.head_commit.message, '[no-deploy]') &&
      (needs.changes.outputs.app == 'true' || needs.changes.outputs.brief == 'true' || contains(github.event.head_commit.message, '[deploy:'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: pnpm 설치
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Node.js 설치
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Build Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential python3 python-is-python3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Parse deploy targets from commit message
        id: deploy_targets
        run: |
          MESSAGE="${{ github.event.head_commit.message }}"
          if [[ $MESSAGE =~ \[deploy:([^\]]+)\] ]]; then
            TARGETS="${BASH_REMATCH[1]}"
            echo "targets=$TARGETS" >> $GITHUB_OUTPUT
          else
            echo "targets=" >> $GITHUB_OUTPUT
          fi

      - name: Ensure clean workspace
        run: |
          rm -rf node_modules
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +

      # ✅ 정상 생명주기 복원 — postinstall 허용
      - name: Install dependencies (scripts enabled)
        run: |
          echo "🧩 Installing dependencies with postinstall enabled..."
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed successfully."

      - name: Verify oxc-parser binding
        run: |
          echo "🔍 Checking oxc-parser native binding..."
          find . -path "*/node_modules/.pnpm/oxc-parser@*/node_modules/oxc-parser/src-js/parser.linux-x64-gnu.node" || echo "⚠️ oxc-parser native binding not found."

      - name: 최종 배포물을 담을 staging 디렉터리 생성
        run: mkdir -p staging

      - name: 루트 index.html을 staging으로 복사
        run: cp index.html staging/

      # -------------------------------------------------------------
      # forgeline-brief 빌드 및 복사
      # -------------------------------------------------------------
      - name: Build forgeline-brief
        if: needs.changes.outputs.brief == 'true' || contains(steps.deploy_targets.outputs.targets, 'forgeline-brief') || contains(steps.deploy_targets.outputs.targets, 'all')
        run: |
          echo "🚀 Building forgeline-brief..."
          pnpm --filter forgeline-brief generate
          echo "✅ forgeline-brief build complete."

      - name: Copy brief to staging
        if: needs.changes.outputs.brief == 'true' || contains(steps.deploy_targets.outputs.targets, 'forgeline-brief') || contains(steps.deploy_targets.outputs.targets, 'all')
        run: |
          mkdir -p staging/forgeline-brief
          cp -r packages/forgeline-brief/.output/public/* staging/forgeline-brief/
          echo "📦 forgeline-brief copied to staging."

      # -------------------------------------------------------------
      # forgeline-app 빌드 및 복사 (Nuxt4 SSG)
      # -------------------------------------------------------------
      - name: Build forgeline-app
        if: needs.changes.outputs.app == 'true' || contains(steps.deploy_targets.outputs.targets, 'forgeline-app') || contains(steps.deploy_targets.outputs.targets, 'all')
        run: |
          echo "🚀 Building forgeline-app..."
          pnpm --filter forgeline-app build
          echo "✅ forgeline-app build complete."

      - name: Copy app to staging
        if: needs.changes.outputs.app == 'true' || contains(steps.deploy_targets.outputs.targets, 'forgeline-app') || contains(steps.deploy_targets.outputs.targets, 'all')
        run: |
          mkdir -p staging/forgeline-app
          cp -r packages/forgeline-app/.output/public/* staging/forgeline-app/
          echo "📦 forgeline-app copied to staging."

      # -------------------------------------------------------------
      # GitHub Pages 업로드 및 배포
      # -------------------------------------------------------------
      - name: 통합된 staging 디렉터리를 아티팩트로 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'staging'

      - name: GitHub Pages에 배포
        uses: actions/deploy-pages@v2
